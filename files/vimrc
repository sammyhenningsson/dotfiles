" Auto-install vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin()
"Language pack
Plug 'sheerun/vim-polyglot'

" Unix shell commands
Plug 'tpope/vim-eunuch'

"Universal defaults
Plug 'tpope/vim-sensible'

"Adjust shiftwidth and expandtab
" Plug 'tpope/vim-sleuth'

"Git
Plug 'tpope/vim-fugitive'

"Rails
Plug 'tpope/vim-rails'

"Toggle comments
Plug 'tpope/vim-commentary'

"Change surrounding chars of a word
Plug 'tpope/vim-surround'

" Run things async and populate the quickfix list
Plug 'tpope/vim-dispatch'

"Database interactions
" Plug 'tpope/vim-dadbod'

"Syntax check
" Plug 'scrooloose/syntastic'
Plug 'dense-analysis/ale'

"Rspec
" Plug 'thoughtbot/vim-rspec'

" Test runners
Plug 'vim-test/vim-test'

"Split/join statements
Plug 'AndrewRadev/splitjoin.vim'

"Jump between lines depending on indentation
Plug 'jeetsukumaran/vim-indentwise'

"Solarized color scheme
Plug 'altercation/vim-colors-solarized'

" highlight characteres to jump to when using f,F,t and T
Plug 'unblevable/quick-scope'

" Smart subsitutions (:Subvert)
Plug 'tpope/vim-abolish'

" Vim motions on speed!
Plug 'easymotion/vim-easymotion'
"
" Vim REST Control
Plug 'diepm/vim-rest-console'

" GraphQL syntax highlight and indentation
" Plug 'jparise/vim-graphql'

call plug#end()

" enable all features
set nocompatible

" Wrap too long lines
set wrap

" Tabs are 2 characters
set tabstop=2
set softtabstop=2

" (Auto)indent uses 2 characters
set shiftwidth=2

" spaces instead of tabs
set expandtab

set pastetoggle=<C-u>
set showmode

" guess indentation
set autoindent

" Expand the command line using tab
set wildchar=<Tab>
set wildcharm=<Tab>

" show line numbers
" set number

" powerful backspaces
set backspace=indent,eol,start

" highlight the searchterms
set hlsearch

" jump to the matches while typing
set incsearch

" ignore case while searching
set ignorecase

" don't wrap words
set textwidth=0

" history
set history=50

" 1000 undo levels
set undolevels=1000

" show partial commands
set showcmd

" show matching braces
set showmatch

" write before hiding a buffer
set autowrite

" auto-detect the filetype
filetype plugin indent on

" syntax highlight
syntax on

"Ignore case
set ic

" Smartcase search. If any character is a Capital, search is case sensitive
set scs

" Always show the menu, insert longest match
set completeopt=menuone,longest

"Open new buffers in a new tab
" set switchbuf=usetab,newtab

" Search recursive (e.g. :find SOME_FI <TAB>)
set path+=**

" Exclude node_modules/ for search, like :find or :tabfind
set wildignore+=*/node_modules/*

" Exclude some more paths
set wildignore+=sorbet/**,system/**,log/**,tmp/**

"
set clipboard=unnamedplus

"
set splitbelow
set splitright

" Create session files
set sessionoptions=buffers,curdir,folds,tabpages

autocmd FileType html setlocal sw=2 sts=2 et
autocmd FileType ruby setlocal sw=2 sts=2 et suffixesadd+=.rb
autocmd FileType eruby setlocal sw=2 sts=2 et
" autocmd FileType yaml setlocal foldmethod=indent

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).

" turn on for markdown files and text files
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufRead,BufNewFile *.txt setlocal spell

autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

autocmd BufEnter * stopinsert

" Disable paste mode when leaving Insert Mode
autocmd InsertLeave * set nopaste

let mapleader = ','
nnoremap <leader>p :!ruby -c %<CR>
nnoremap <leader>c :call g:ToggleQuickfix()<CR>
nnoremap <leader>n :set number!<CR>
nnoremap <leader>m :nohlsearch<CR>
nnoremap <leader>rh :set cursorline!<CR>
nnoremap <leader>b f,2lXi<CR><Esc>
nnoremap <leader>d :call RailsDbSchema()<CR>
nnoremap <leader>q :call RailsRoutes()<CR>
nnoremap <leader>i :call RailsLocales()<CR>
nnoremap <leader>hr :set cursorline!<CR>
nnoremap <leader>hc :call g:ToggleColorColumn()<CR>
nnoremap <leader>a :G blame<CR>
nnoremap <leader>g yiw:Ggrep! <C-R>"<CR>
vmap     <leader>g y:Ggrep! "<C-R>""<CR>
nnoremap <leader>rts 'T:call RunNearestSpec()<CR>
nnoremap <leader>x :source $MYVIMRC<CR>

" Open file relative to current file
nnoremap <leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>t :tabe <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>s :split <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>v :vsplit <C-R>=expand("%:p:h") . "/" <CR>
" nnoremap <leader>d :vsplit<CR><C-W>h<C-O>
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

nnoremap <leader>] :tab tag <C-R><C-W><CR>

"Highlight current word without jumping to next
nnoremap <leader>* *N

" Easymotion
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" " Rspec
" nnoremap <leader>rf :w<CR>:call RunCurrentSpecFile()<CR>
" nnoremap <leader>rs :w<CR>:call RunNearestSpec()<CR>
" nnoremap <leader>rl :w<CR>:call RunLastSpec()<CR>
" nnoremap <leader>ra :w<CR>:call RunFailedSpecs()<CR>

" vim-test
nnoremap <leader>rdf :w<CR>:TestFile<CR>
nnoremap <leader>rds :w<CR>:TestNearest<CR>
nnoremap <leader>rdl :w<CR>:TestLast<CR>
nnoremap <leader>rf :w<CR>:TestFile -strategy=basic<CR>
nnoremap <leader>rs :w<CR>:TestNearest -strategy=basic<CR>
nnoremap <leader>rl :w<CR>:TestLast -strategy=basic<CR>


" Change current directory to the same as current file
" set autochdir
" autocmd BufEnter * silent! lcd %:p:h

"Ctags
set tags+=./.ctags,.git/tags
"Open the definition in a new tab
nnoremap <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
"Open the definition in a vertical split
nnoremap <A-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

"Map gl to Go to end of line
nnoremap gl $
nnoremap gh ^
"
" Insert a new line before/after current row
nnoremap [<Space> O<Esc>j
nnoremap ]<Space> o<Esc>k

"Map Ctrl h/l to previous/next tab
nnoremap <C-h> :tabp<CR>
nnoremap <C-l> :tabn<CR>

" Faster movement with Ctrl
nnoremap <C-J> 5j
nnoremap <C-K> 5k

" Insert a new line before/after current row
nnoremap [a :prev<CR>
nnoremap ]a :next<CR>

" Move in insert mode
inoremap <C-h> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-l> <C-o>l

" nmap <A-H> 3b
" nmap <A-J> 5j
" nmap <A-K> 5k
" nmap <A-L> 3w

" Toggle last buffer
nnoremap <C-U> :b #<CR>

"" in visual mode, search selection up or down
vnoremap * y/<C-R>"<CR>
vnoremap # y?<C-R>"<CR>

cmap w!! w !sudo tee > /dev/null %

" No more Ex mode
map Q <Nop>

iab frozstr # frozen_string_literal: true

function! g:ToggleQuickfix()
  for buffer in tabpagebuflist()
    if bufname(buffer) == ''
      " then it should be the quickfix window
      cclose
      return
    endif
  endfor

  botright copen
endfunction

function! g:ToggleColorColumn()
  if &l:colorcolumn != ''
    let &l:colorcolumn=''
  else
    let &l:colorcolumn=col('.')
  endif
endfunction

function! RailsDbSchema()
  let l:git_dir = system("git rev-parse --show-toplevel")
  let l:file = substitute(l:git_dir, '\n$', '/db/schema.rb', '')
  " let l:file = substitute(l:git_dir, '\n$', '/db/structure.sql', '')
  :exec("0tabedit ".expand(l:file))
endfunction

function! RailsRoutes()
  let l:git_dir = system("git rev-parse --show-toplevel")
  let l:file = substitute(l:git_dir, '\n$', '/config/routes.rb', '')
  :exec("0tabedit ".expand(l:file))
endfunction

function! RailsLocales()
  let l:git_dir = system("git rev-parse --show-toplevel")
  let l:dir = substitute(l:git_dir, '\n$', '/config/locales/', '')
  :exec("0tabedit ".expand(l:dir . 'en.yml'))
  :exec("vsplit ".expand(l:dir . 'sv.yml'))
endfunction

function! BufSel(pattern)
  let bufcount = bufnr("$")
  let currbufnr = 1
  let nummatches = 0
  let firstmatchingbufnr = 0
  while currbufnr <= bufcount
    if(bufexists(currbufnr))
      let currbufname = bufname(currbufnr)
      if(match(currbufname, a:pattern) > -1)
        echo currbufnr . ": ". bufname(currbufnr)
        let nummatches += 1
        let firstmatchingbufnr = currbufnr
      endif
    endif
    let currbufnr = currbufnr + 1
  endwhile
  if(nummatches == 1)
    execute ":buffer ". firstmatchingbufnr
  elseif(nummatches > 1)
    let desiredbufnr = input("Enter buffer number: ")
    if(strlen(desiredbufnr) != 0)
      execute ":buffer ". desiredbufnr
    endif
  else
    echo "No matching buffers"
  endif
endfunction

" " Make sure highlight search foreground color is displayable on Yellow
" highlight Search term=reverse ctermbg=11 ctermfg=Black guibg=Yellow

" Code Lint
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 2
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_ruby_checkers = ['rubocop']
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'
" let g:syntastic_scss_checkers = ['scss_lint']
" let g:syntastic_debug = 33
"let g:syntastic_loc_list_height = 3

let g:ale_set_highlights = 0
let g:ale_virtualtext_cursor = 0

augroup SpellUnderline
  autocmd!
  autocmd ColorScheme * highlight SpellBad cterm=underline
augroup END

let g:solarized_termcolors=256
colorscheme solarized

let theme = system('gsettings get org.gnome.desktop.interface gtk-theme')
if theme =~ 'Dark'
  set background=dark
else
  set background=light
endif


let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" if &diff
"   highlight DiffAdd    cterm=BOLD ctermfg=NONE ctermbg=22
"   highlight DiffDelete cterm=BOLD ctermfg=NONE ctermbg=52
"   highlight DiffChange cterm=BOLD ctermfg=NONE ctermbg=23
"   highlight DiffText   cterm=BOLD ctermfg=NONE ctermbg=24
" endif

let g:netrw_liststyle = 1

" Fix long file names being smashed together with file size
let g:netrw_dynamic_maxfilenamelen = 32

" Added git branch to status line
set statusline=%<%{fugitive#statusline()}\ 
set statusline+=%f\ 
set statusline+=%h%m%r
set statusline+=%q
set statusline+=[Buf:%n]
set statusline+=%=
set statusline+=%-14.(%l,%c%V%)\ 
set statusline+=%P

" Run vim-test tests via vim-dispatch
let test#strategy = "dispatch"

function! BufSel(pattern)
  let bufcount = bufnr("$")
  let currbufnr = 1
  let nummatches = 0
  let firstmatchingbufnr = 0
  while currbufnr <= bufcount
    if(bufexists(currbufnr))
      let currbufname = bufname(currbufnr)
      if(match(currbufname, a:pattern) > -1)
        echo currbufnr . ": ". bufname(currbufnr)
        let nummatches += 1
        let firstmatchingbufnr = currbufnr
      endif
    endif
    let currbufnr = currbufnr + 1
  endwhile

  if(nummatches == 1)
    return firstmatchingbufnr
  elseif(nummatches > 1)
    let desiredbufnr = input("Enter buffer number: ")
    if(strlen(desiredbufnr) != 0)
      return desiredbufnr
    endif
  else
    return -1
  endif
endfunction

function! BufOpen(pattern)
  let matchnr = BufSel(a:pattern)
  if(matchnr < 0)
    echo "No buffers match: " . a:pattern
  else
    execute ":buffer ". matchnr
  endif
endfunction

function! BufTabOpen(pattern)
  let matchnr = BufSel(a:pattern)
  if(matchnr < 0)
    echo "No buffers match: " . a:pattern
  else
    execute ":tab sb ". matchnr
  endif
endfunction

"Bind the Buf**() functions to user-commands
command! -nargs=1 Bs :call BufSel("<args>")
command! -nargs=1 Bo :call BufOpen("<args>")
command! -nargs=1 Bt :call BufTabOpen("<args>")
