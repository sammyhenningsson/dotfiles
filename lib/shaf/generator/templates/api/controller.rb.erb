require '<%= policy_file %>'

class <%= controller_class_name %> < BaseController

  authorize_with <%= policy_class_name %>

  resource_uris_for :<%= name %>

  get :<%= plural_name %>_uri do
    authorize! :read
    collection = paginate(<%= model_class_name %>.order(:created_at).reverse)
    respond_with_collection collection, serializer: <%= serializer_class_name %>
  end

  get :new_<%= name %>_uri do
    authorize! :read
    cache_control(:private, http_cache_max_age: :short)
    respond_with create_form
  end

  post :<%= plural_name %>_uri do
    authorize! :write
    <%= name %> = <%= model_class_name %>.create(<%= name %>_params)
    headers({ "Location" => <%= name %>_uri(<%= name %>) })
    respond_with <%= name %>, status: 201
  end

  get :<%= name %>_uri do
    authorize! :read
    respond_with <%= name %>
  end

  get :edit_<%= name %>_uri do
    authorize! :read
    cache_control(:private, http_cache_max_age: :short)
    respond_with edit_form
  end

  put :<%= name %>_uri do
    authorize! :write
    <%= name %>.update(<%= name %>_params)
    respond_with <%= name %>
  end

  delete :<%= name %>_uri do
    authorize! :write
    <%= name %>.destroy
    status 204
  end

  def <%= name %>_params
    # Generated method - TODO: Remove any params that should not be allowed!
    safe_params(<%= params.map { |p| ":#{p[0]}" }.join(', ') %>)
  end

  def <%= name %>
    @<%= name %> ||= <%= model_class_name %>[params['id']].tap do |<%= name %>|
      raise NotFoundError.new(clazz: <%= model_class_name %>, id: params['id']) unless <%= name %>
    end
  end

  def create_form
    <%= model_class_name %>.create_form.tap do |form|
      form.self_link = new_<%= name %>_uri
      form.href = <%= plural_name %>_uri
    end
  end

  def edit_form
    <%= name %>.edit_form.tap do |form|
      form.self_link = edit_<%= name %>_uri(<%= name %>)
      form.href = <%= name %>_uri(<%= name %>)
    end
  end
end
