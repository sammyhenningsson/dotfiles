class <%= controller_class_name %> < BaseController

  resource_uris_for :<%= name %>

  get '/<%= name %>/form' do
    form = <%= model_class_name %>.create_form
    form.self_link = new_<%= name %>_uri
    form.href = <%= plural_name %>_uri
    respond_with form
  end

  get '/<%= plural_name %>/:id/edit' do
    form = <%= name %>.edit_form
    form.self_link = edit_<%= name %>_uri(<%= name %>)
    form.href = <%= name %>_uri(<%= name %>)
    respond_with form
  end

  get '/<%= plural_name %>/:id' do
    respond_with <%= name %>
  end

  put '/<%= plural_name %>/:id' do
    <%= name %>.update(<%= name %>_params)
    respond_with <%= name %>
  end

  delete '/<%= plural_name %>/:id' do
    <%= name %>.destroy
    status 204
  end

  get '/<%= plural_name %>' do
    respond_with_collection paginate(<%= model_class_name %>.order(:created_at).reverse)
  end

  post '/<%= plural_name %>' do
    <%= name %> = <%= model_class_name %>.create(<%= name %>_params)
    headers({ "Location" => <%= name %>_uri(<%= name %>) })
    respond_with <%= name %>, status: 201
  end

  def <%= name %>_params
    # FIXME! Specify which params are allowed by passing them to safe_params. E.g:
    # safe_params(:param1, :param2, :param3)
    {}
  end

  def <%= name %>
    <%= model_class_name %>[params['id']].tap do |<%= name %>|
      raise ::NotFoundError.new(clazz: <%= model_class_name %>, id: params['id']) unless <%= name %>
    end
  end

end
